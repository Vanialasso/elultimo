import "../../../dataclasses/CDTCHandler/models/CDTCHandler.ed_dclass";
import "../../../dataclasses/CDEvAction/models/CDEvAction.ed_dclass";
import "../../../dataclasses/Pr_Time/models/Pr_Time.ed_dclass";
import "../../../protocols/CPHK_FDIRCtrl/models/CPHK_FDIRCtrl.ed_prot";
import "../../../protocols/EDROOMTimingSAP/models/EDROOMTimingSAP.ed_prot";
import "../../../protocols/EDROOMServiceLibrary/models/EDROOMServiceLibrary.ed_prot";
import "../../../sais/pus_services_iface_v1/models/pus_services_iface_v1.ed_sai";



/**
 * \class   CCHK_FDIRMng
 *
 */


reactive component CCHK_FDIRMng{

	uri := es.uah.aut.srg.edroom.mclev.cmp.CCHK_FDIRMng;
	version := v1;
	stack_size := 4096;
	def_max_nb_messages := 10;
	requires := pus_services_iface(v1);




	structure {

		ports {


			system port EDROOMsl
			{
				id:= 0;
				protocol:= EDROOMServiceLibrary(v1);
			};
			external port HK_FDIRCtrl {
				id := 1;
				cardinality := 1;
				protocol := CPHK_FDIRCtrl(v1);

			};

			timing port HK_FDIRTimer {
				id := 2;
				protocol := EDROOMTimingSAP(v1);

			};



		};


		data pools {
			CDEvAction(v1) CEDROOMPoolCDEvAction[4];

		};


	};


	behaviour {

		contexts {


			context Top_0{


				id := 0;


				variables {
					variable VNextTimeout{
					 class := Pr_Time(v1);

					 constructor := "";
					 dimension := 0;
					};


				};


				states {
					state I{
						id := 0;
					};
					state Ready{
						id := 1;
					};
				};


				init state := I;


				guards{

					/**
					 * \brief  
					 */

					guard GPendingEvAction {
						<code>
						//return (false);
						return (pus_service19_pending_ev_actions()); 
						 


						</code>

					};


				};


				items{
					/**
					 * \brief  
					 */

					inform at FDoHK_FDIR {
						code {
							<code>
							 
							VNextTimeout+= Pr_Time(1,0); // Add X sec + Y microsec 
							time=VNextTimeout; 
							 
							pus_services_update_params();
							pus_service4_update_all_stats();
							pus_service3_do_HK();
							pus_services_do_FDIR();


							</code>
						};

						port :=HK_FDIRTimer;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					msgdatahandler FExecHK_FDIR_TC {
						code {
							<code>
							 
							varSHK_FDIR_TC.ExecTC();


							</code>
						};

						port :=HK_FDIRCtrl;

						message :=CPHK_FDIRCtrl(v1)::SHK_FDIR_TC;

					};

					/**
					 * \brief  
					 */

					send FFwdEvAction {
						code {
							<code>
								
									// Complete Data 
								
							 
							pSEvAction_Data-&gt;ExtractEvActionFromQueue();


							</code>
						};

						port :=HK_FDIRCtrl;

						message :=CPHK_FDIRCtrl(v1)::SEvAction;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					inform at FInitHK_FDIR {
						code {
							<code>
							 
							time.GetTime(); // Get current monotonic time   
							time+=Pr_Time(1,0); // Add X sec + Y microsec    
							VNextTimeout=time;
							 
							 


							</code>
						};

						port :=HK_FDIRTimer;

						priority :=3;

					};


				};


				choice points{
					choice point DoHK_FDIR{


						id := 0;


						branches{

							branch DoHK_FDIR_PendingEvAction{
								id := 0;
								sink := Ready;


								sends := FFwdEvAction;

								guard := GPendingEvAction;

							};


						};

						default branch DoHK_FDIR_NoEvAction{
							id := 1;
							sink := Ready;

						};
					};
				};


				transitions{

					transition Init{
						id := 0;
						source := I;
						sink := Ready;


						actions := FInitHK_FDIR;


						asynchronous trigger {
							port := EDROOMsl;
							message := EDROOMServiceLibrary(v1)::EDROOMStart;
						};
					};

					transition ExecTC{
						id := 1;
						source := Ready;
						sink := Ready;


						msgdatahandler := FExecHK_FDIR_TC;

						handshakes{
							handshake{
								invoke := ;
							};
						};


						asynchronous trigger {
							port := HK_FDIRCtrl;
							message := CPHK_FDIRCtrl(v1)::SHK_FDIR_TC;
						};
					};

					transition DoHK_FDIR{
						id := 2;
						source := Ready;
						sink := DoHK_FDIR;


						actions := FDoHK_FDIR;

						handshakes{
							handshake{
								invoke := ;
							};
						};


						asynchronous trigger {
							port := HK_FDIRTimer;
							message := EDROOMTimingSAP(v1)::EDROOMSignalTimeout;
						};
					};


				};


			};


		};

		top context := Top_0;


	};


};